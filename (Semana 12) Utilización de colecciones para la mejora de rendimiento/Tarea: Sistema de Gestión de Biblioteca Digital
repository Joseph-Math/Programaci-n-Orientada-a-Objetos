# Clase Libro
class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        self.titulo_autor = (titulo, autor)  # Tupla para título y autor
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"'{self.titulo_autor[0]}' por {self.titulo_autor[1]} (ISBN: {self.isbn})"

# Clase Usuario
class Usuario:
    def __init__(self, nombre, user_id):
        self.nombre = nombre
        self.user_id = user_id
        self.libros_prestados = []  # Lista para almacenar libros prestados

    def prestar_libro(self, libro):
        self.libros_prestados.append(libro)

    def devolver_libro(self, isbn):
        self.libros_prestados = [libro for libro in self.libros_prestados if libro.isbn != isbn]

    def __str__(self):
        return f"Usuario: {self.nombre} (ID: {self.user_id})"

# Clase Biblioteca
class Biblioteca:
    def __init__(self):
        self.libros_disponibles = {}  # Diccionario con ISBN como clave y objeto Libro como valor
        self.usuarios_registrados = set()  # Conjunto para manejar los IDs de usuarios únicos
        self.historial_prestamos = {}  # Diccionario para gestionar préstamos {user_id: [libros_prestados]}

    # Añadir libro a la biblioteca
    def anadir_libro(self, libro):
        if libro.isbn not in self.libros_disponibles:
            self.libros_disponibles[libro.isbn] = libro
            print(f"Libro añadido: {libro}")
        else:
            print("El libro ya está en la biblioteca.")

    # Quitar libro de la biblioteca
    def quitar_libro(self, isbn):
        if isbn in self.libros_disponibles:
            libro = self.libros_disponibles.pop(isbn)
            print(f"Libro eliminado: {libro}")
        else:
            print("El libro no está en la biblioteca.")

    # Registrar nuevo usuario
    def registrar_usuario(self, usuario):
        if usuario.user_id not in self.usuarios_registrados:
            self.usuarios_registrados.add(usuario.user_id)
            self.historial_prestamos[usuario.user_id] = []
            print(f"Usuario registrado: {usuario}")
        else:
            print("El usuario ya está registrado.")

    # Dar de baja un usuario
    def dar_de_baja_usuario(self, user_id):
        if user_id in self.usuarios_registrados:
            self.usuarios_registrados.remove(user_id)
            self.historial_prestamos.pop(user_id, None)
            print(f"Usuario con ID {user_id} dado de baja.")
        else:
            print("El usuario no está registrado.")

    # Prestar libro a un usuario
    def prestar_libro(self, user_id, isbn):
        if user_id in self.usuarios_registrados:
            if isbn in self.libros_disponibles:
                libro = self.libros_disponibles.pop(isbn)
                self.historial_prestamos[user_id].append(libro)
                print(f"Libro prestado: {libro}")
            else:
                print("El libro no está disponible.")
        else:
            print("Usuario no registrado.")

    # Devolver libro a la biblioteca
    def devolver_libro(self, user_id, isbn):
        if user_id in self.historial_prestamos:
            libros_usuario = self.historial_prestamos[user_id]
            for libro in libros_usuario:
                if libro.isbn == isbn:
                    libros_usuario.remove(libro)
                    self.libros_disponibles[isbn] = libro
                    print(f"Libro devuelto: {libro}")
                    return
            print("El usuario no tiene ese libro prestado.")
        else:
            print("Usuario no registrado.")

    # Buscar libro por título, autor o categoría
    def buscar_libros(self, titulo=None, autor=None, categoria=None):
        resultados = []
        for libro in self.libros_disponibles.values():
            if (titulo and titulo in libro.titulo_autor[0]) or \
               (autor and autor in libro.titulo_autor[1]) or \
               (categoria and categoria == libro.categoria):
                resultados.append(libro)
        return resultados

    # Listar libros prestados por un usuario
    def listar_libros_prestados(self, user_id):
        if user_id in self.historial_prestamos:
            return self.historial_prestamos[user_id]
        else:
            print("Usuario no registrado.")
            return []

# Ejemplo de uso
if __name__ == "__main__":
    biblioteca = Biblioteca()

    # Crear libros
    libro1 = Libro("El Quijote", "Miguel de Cervantes", "Clásico", "12345")
    libro2 = Libro("Cien años de soledad", "Gabriel García Márquez", "Ficción", "67890")

    # Añadir libros a la biblioteca
    biblioteca.anadir_libro(libro1)
    biblioteca.anadir_libro(libro2)

    # Crear usuario
    usuario1 = Usuario("Juan Pérez", 1)

    # Registrar usuario
    biblioteca.registrar_usuario(usuario1)

    # Prestar libro
    biblioteca.prestar_libro(1, "12345")

    # Listar libros prestados
    libros_prestados = biblioteca.listar_libros_prestados(1)
    for libro in libros_prestados:
        print(f"Libro prestado: {libro}")

    # Devolver libro
    biblioteca.devolver_libro(1, "12345")

    # Buscar libros
    resultados_busqueda = biblioteca.buscar_libros(titulo="Cien años")
    for libro in resultados_busqueda:
        print(f"Resultado de búsqueda: {libro}")

